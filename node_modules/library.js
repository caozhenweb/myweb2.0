/**
 *
 * dev by danhuang
 * this libray is used for system define function
 * @time 2014-02-24
 * 
 */

function getConfig(){
	if(!arguments){
		return false;
	}
	var filePath = arguments[0];
	var filePath = 'conf/' + ENVIRONMENT + '/' + filePath + '.json';
	
	if(arguments.length > 1){ // check return the key data or all data
		var fileKey  = arguments[1];
		return CONFIG.get(filePath, fileKey);
	}
	return CONFIG.get(filePath);
}

/**
 *
 * @desc auto load all config modules
 * auto config is in conf/dev/load_config.json
 * 
 */
function loadModules(){
	/* get configure auto load modules */
	var modules = getConfig('load_config');

	/* use eval to load modules as a global parameters */
	for(var moduleName in modules){
		var module = modules[moduleName];
		eval("try{global." + moduleName + " = require('" + module + "');console.log('load " + module + " success')}catch(e){console.log('--------------');console.error('error load " + module + " failed');console.log(e);console.log('--------------')}");
	}
}

/**
 * @desc response default 404, if not exist 404 page response 500
 * @params object res
 * @return default 404
 */
function returnDefault(res){
	try{
		var string = FS.readFileSync(VIEW + _PAGE_404, 'utf8');
		res.writeHead(404, { 'Content-Type': 'text/html' });
		res.end(string);
	} catch(e){
		console.log(e);
		string = '';
		res.writeHead(500, { 'Content-Type': 'text/html' });
		res.end(string);
	}
}

/**
 *
 * @desc get user ip
 * @params object req
 * @return string
 */ 
function getClientIp(req) {
    return req.headers['x-forwarded-for'] || 
     req.connection.remoteAddress || 
     req.socket.remoteAddress ||
     req.connection.socket.remoteAddress;
};

/**
 *	@return	{string} 2013-03-07 12:12:00
 */
function getDateTime(timestamp) {
	var timeTemp = timestamp ? new Date(timestamp) : new Date(),
		currentTime;
	var yy = timeTemp.getFullYear();
	var MM = timeTemp.getMonth();
	var dd = timeTemp.getDate();
	var hh = timeTemp.getHours();
	var mm = timeTemp.getMinutes();
	var ss = timeTemp.getSeconds();

	// fixed MM, value of MM from 0 to 11
	MM === 0 ? MM = 12 : MM++;

	// fixed time format
	MM < 10 ? MM = '0'.concat(MM) : null;
	dd < 10 ? dd = '0'.concat(dd) : null;
	
	return '' + yy + '-' + MM  + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;
}

/* exports return */
exports.getConfig = getConfig;
exports.loadModules = loadModules;
exports.returnDefault = returnDefault;
exports.getClientIp = getClientIp;
exports.getDateTime = getDateTime;

/* end of file library.js*/
